#include <linux/if.h>
#include <linux/ip.h>
#include <linux/tcp.h>
#include <linux/udp.h>

tracepoint:net:netif_receive_skb
{
    $skb = (struct sk_buff *)args->skbaddr;

    if (bswap($skb->protocol) != ETH_P_IP) { return; } // IPv4

    // 网卡
    $dev = (struct net_device *)$skb->dev;
    $ifindex = $dev->ifindex;

    if ($ifindex == 1) { return; } // interface: lo

    // IP Header
    $iph = (struct iphdr *)($skb->head + $skb->network_header);
    $sip = ntop(AF_INET, $iph->saddr);
    $dip = ntop(AF_INET, $iph->daddr);

    if ($iph->protocol == IPPROTO_TCP) { // TCP
        // TCP HEADER 
        $tcphdr = (struct tcphdr *)($skb->head + $skb->transport_header);
        $sport = bswap($tcphdr->source);
        $dport = bswap($tcphdr->dest);

        if ($sport == 80 || $dport == 80) {
            time("%H:%M:%S  ");
            printf("[%d] netif_receive_skb: %s:%d -> %s:%d\n", $ifindex, $sip, $sport, $dip, $dport);
            //printf("%s\n",  kstack());
        }
    } else if ($iph->protocol == IPPROTO_UDP) { // UDP
        $udphdr = (struct udphdr *)($skb->head + $skb->transport_header);
        $sport = bswap($udphdr->source);
        $dport = bswap($udphdr->dest);
        if ($sport == 33333 || $dport == 33333) {
            time("%H:%M:%S ");
            printf("[%d] netif_receive_skb: %s:%d -> %s:%d\n", $ifindex, $sip, $sport, $dip, $dport);
        }
    }
}

tracepoint:skb:kfree_skb
{
    $reason = args->reason;
    $skb = (struct sk_buff *)args->skbaddr;

    if (bswap($skb->protocol) != ETH_P_IP) { return; } // IPv4

    // 网卡
    $dev = (struct net_device *)$skb->dev;
    $ifindex = $dev->ifindex;

    if ($ifindex == 1) { return; } // interface: lo

    // IP Header
    $iph = (struct iphdr *)($skb->head + $skb->network_header);
    $sip = ntop(AF_INET, $iph->saddr);
    $dip = ntop(AF_INET, $iph->daddr);

    if ($iph->protocol == IPPROTO_IPIP) {
        time("%H:%M:%S ");
        printf("[%d] reason: %d kfree_skb: %s -> %s\n", $ifindex, $reason, $sip, $dip);
        printf("%s\n",  kstack());
        return;
    }

    if ($iph->protocol == IPPROTO_TCP) { // TCP
        // TCP HEADER 
        $tcphdr = (struct tcphdr *)($skb->head + $skb->transport_header);
        $sport = bswap($tcphdr->source);
        $dport = bswap($tcphdr->dest);

        //if ($sport == 80 || $dport == 80) {
            time("%H:%M:%S ");
            printf("[%d] reason: %d kfree_skb: %s:%d -> %s:%d\n", $ifindex, $reason, $sip, $sport, $dip, $dport);
            printf("%s\n",  kstack());
        //}
    } else if ($iph->protocol == IPPROTO_UDP) { // UDP
        $udphdr = (struct udphdr *)($skb->head + $skb->transport_header);
        $sport = bswap($udphdr->source);
        $dport = bswap($udphdr->dest);
        if ($sport == 33333 || $dport == 33333) {
            time("%H:%M:%S ");
            printf("[%d] reason: %d kfree_skb: %s:%d -> %s:%d\n", $ifindex, $reason, $sip, $sport, $dip, $dport);
            printf("%s\n",  kstack());
        }
    }
}