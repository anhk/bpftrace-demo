#!/usr/bin/env bpftrace

#include <net/tcp_states.h>
#include <net/sock.h>
#include <linux/socket.h>
#include <linux/if.h>
#include <linux/ip.h>
#include <linux/tcp.h>
#include <linux/skbuff.h>

kprobe:__netif_receive_skb
{
    $skb = (struct sk_buff*)arg0;

    if (bswap($skb->protocol) != ETH_P_IP) {
        printf("++++ %x\n", $skb->protocol); //-> 0x86DD
        return;
    }

    // 网卡
    $dev = (struct net_device *)$skb->dev;
    $ifindex = $dev->ifindex;

    if ($ifindex == 1) { // interface: lo
        return;
    }

    // IP Header
    $iph = (struct iphdr *)($skb->head + $skb->network_header);
    $sip = ntop(AF_INET, $iph->saddr);
    $dip = ntop(AF_INET, $iph->daddr);

    if ($iph->protocol != IPPROTO_TCP) { return ; }

    // TCP HEADER 
    $tcphdr = (struct tcphdr *)($skb->head + $skb->transport_header);
    $sport = bswap($tcphdr->source);
    $dport = bswap($tcphdr->dest);

    //if ($sport == 80 || $dport == 80) {
        time("%H:%M:%S  ");
        printf("[%d] __netif_receive_skb: %s:%d -> %s:%d\n", $ifindex, $sip, $sport, $dip, $dport);
   //     printf("%s\n",  kstack());
    //}
}


kprobe:ip_rcv
{
}

kprobe:ip_forward
{
}

END 
{
    printf("Bye!\n");
}