#!/usr/bin/env bpftrace

#include <net/tcp_states.h>
#include <net/sock.h>
#include <linux/socket.h>
#include <linux/if.h>
#include <linux/ip.h>
#include <linux/tcp.h>
#include <linux/skbuff.h>

kprobe:__netif_receive_skb
{
    $skb = (struct sk_buff*)arg0;

    if (bswap($skb->protocol) != ETH_P_IP) { return; } // IPv4

    // 网卡
    $dev = (struct net_device *)$skb->dev;
    $ifindex = $dev->ifindex;

    if ($ifindex == 1) { return; } // interface: lo

    // IP Header
    $iph = (struct iphdr *)($skb->head + $skb->network_header);
    $sip = ntop(AF_INET, $iph->saddr);
    $dip = ntop(AF_INET, $iph->daddr);

    if ($iph->protocol != IPPROTO_TCP) { return ; } // TCP

    // TCP HEADER 
    $tcphdr = (struct tcphdr *)($skb->head + $skb->transport_header);
    $sport = bswap($tcphdr->source);
    $dport = bswap($tcphdr->dest);

    if ($sport == 80 || $dport == 80) {
        time("%H:%M:%S  ");
        printf("[%d] __netif_receive_skb: %s:%d -> %s:%d\n", $ifindex, $sip, $sport, $dip, $dport);
        //printf("%s\n",  kstack());
    }
}

kprobe:tcp_v4_do_rcv
{
    $skb = (struct sk_buff*)arg1;

    if (bswap($skb->protocol) != ETH_P_IP) { return; } // IPv4

    // 网卡
    $dev = (struct net_device *)$skb->dev;
    $ifindex = $dev->ifindex;

    if ($ifindex == 1) { return; } // interface: lo

    // IP Header
    $iph = (struct iphdr *)($skb->head + $skb->network_header);
    $sip = ntop(AF_INET, $iph->saddr);
    $dip = ntop(AF_INET, $iph->daddr);

    if ($iph->protocol != IPPROTO_TCP) { return ; } // TCP

    // TCP HEADER 
    $tcphdr = (struct tcphdr *)($skb->head + $skb->transport_header);
    $sport = bswap($tcphdr->source);
    $dport = bswap($tcphdr->dest);

    if ($sport == 80 || $dport == 80) {
        time("%H:%M:%S  ");
        printf("[%d] tcp_v4_do_rcv: %s:%d -> %s:%d\n", $ifindex, $sip, $sport, $dip, $dport);
        //printf("%s\n",  kstack());
    }
}

tracepoint:net:netif_receive_skb
{
    $skb = (struct sk_buff *)args->skbaddr;

    if (bswap($skb->protocol) != ETH_P_IP) { return; } // IPv4

    // 网卡
    $dev = (struct net_device *)$skb->dev;
    $ifindex = $dev->ifindex;

    if ($ifindex == 1) { return; } // interface: lo

    // IP Header
    $iph = (struct iphdr *)($skb->head + $skb->network_header);
    $sip = ntop(AF_INET, $iph->saddr);
    $dip = ntop(AF_INET, $iph->daddr);

    if ($iph->protocol != IPPROTO_TCP) { return ; } // TCP

    // TCP HEADER 
    $tcphdr = (struct tcphdr *)($skb->head + $skb->transport_header);
    $sport = bswap($tcphdr->source);
    $dport = bswap($tcphdr->dest);

    if ($sport == 80 || $dport == 80) {
        time("%H:%M:%S  ");
        printf("[%d] netif_receive_skb: %s:%d -> %s:%d\n", $ifindex, $sip, $sport, $dip, $dport);
        //printf("%s\n",  kstack());
    }
}

kprobe:ip_route_use_hint
{
    $skb = (struct sk_buff*)arg0;

    if (bswap($skb->protocol) != ETH_P_IP) { return; } // IPv4

    // 网卡
    $dev = (struct net_device *)$skb->dev;
    $ifindex = $dev->ifindex;

    if ($ifindex == 1) { return; } // interface: lo

    // IP Header
    $iph = (struct iphdr *)($skb->head + $skb->network_header);
    $sip = ntop(AF_INET, $iph->saddr);
    $dip = ntop(AF_INET, $iph->daddr);

    if ($iph->protocol != IPPROTO_TCP) { return ; } // TCP

    // TCP HEADER 
    $tcphdr = (struct tcphdr *)($skb->head + $skb->transport_header);
    $sport = bswap($tcphdr->source);
    $dport = bswap($tcphdr->dest);

    if ($sport == 80 || $dport == 80) {
        time("%H:%M:%S  ");
        printf("[%d] ip_route_use_hint: %s:%d -> %s:%d\n", $ifindex, $sip, $sport, $dip, $dport);
        //printf("%s\n",  kstack());
    }
}

kprobe:ip_route_input_noref
{
    $skb = (struct sk_buff*)arg0;

    if (bswap($skb->protocol) != ETH_P_IP) { return; } // IPv4

    // 网卡
    $dev = (struct net_device *)$skb->dev;
    $ifindex = $dev->ifindex;

    if ($ifindex == 1) { return; } // interface: lo

    // IP Header
    $iph = (struct iphdr *)($skb->head + $skb->network_header);
    $sip = ntop(AF_INET, $iph->saddr);
    $dip = ntop(AF_INET, $iph->daddr);

    if ($iph->protocol != IPPROTO_TCP) { return ; } // TCP

    // TCP HEADER 
    $tcphdr = (struct tcphdr *)($skb->head + $skb->transport_header);
    $sport = bswap($tcphdr->source);
    $dport = bswap($tcphdr->dest);

    if ($sport == 80 || $dport == 80) {
        time("%H:%M:%S  ");
        printf("[%d] ip_route_input_noref: %s:%d -> %s:%d\n", $ifindex, $sip, $sport, $dip, $dport);
        //printf("%s\n",  kstack());
    }
}

kretprobe:ip_route_input_noref
{
    if (retval != 0){
        printf("ip_route_input_noref return %d\n", retval);
    }
}


kprobe:ip_forward
{
    $skb = (struct sk_buff*)arg0;

    if (bswap($skb->protocol) != ETH_P_IP) { return; } // IPv4

    // 网卡
    $dev = (struct net_device *)$skb->dev;
    $ifindex = $dev->ifindex;

    if ($ifindex == 1) { return; } // interface: lo

    // IP Header
    $iph = (struct iphdr *)($skb->head + $skb->network_header);
    $sip = ntop(AF_INET, $iph->saddr);
    $dip = ntop(AF_INET, $iph->daddr);

    if ($iph->protocol != IPPROTO_TCP) { return ; } // TCP

    // TCP HEADER 
    $tcphdr = (struct tcphdr *)($skb->head + $skb->transport_header);
    $sport = bswap($tcphdr->source);
    $dport = bswap($tcphdr->dest);

    if ($sport == 80 || $dport == 80) {
        time("%H:%M:%S  ");
        printf("[%d] ip_forward: %s:%d -> %s:%d\n", $ifindex, $sip, $sport, $dip, $dport);
        //printf("%s\n",  kstack());
    }
}

tracepoint:skb:kfree_skb
{
    $reason = args->reason;
    $skb = (struct sk_buff *)args->skbaddr;

    if (bswap($skb->protocol) != ETH_P_IP) { return; } // IPv4

    // 网卡
    $dev = (struct net_device *)$skb->dev;
    $ifindex = $dev->ifindex;

    if ($ifindex == 1) { return; } // interface: lo

    // IP Header
    $iph = (struct iphdr *)($skb->head + $skb->network_header);
    $sip = ntop(AF_INET, $iph->saddr);
    $dip = ntop(AF_INET, $iph->daddr);

    if ($iph->protocol != IPPROTO_TCP) { return ; } // TCP

    // TCP HEADER 
    $tcphdr = (struct tcphdr *)($skb->head + $skb->transport_header);
    $sport = bswap($tcphdr->source);
    $dport = bswap($tcphdr->dest);

    if ($sport == 80 || $dport == 80) {
        time("%H:%M:%S ");
        printf("[%d] reason: %d kfree_skb: %s:%d -> %s:%d\n", $ifindex, $reason, $sip, $sport, $dip, $dport);

        printf("iph->ihl: %d, pkt_type: %d\n", $iph->ihl, $skb->pkt_type);
        printf("%s\n",  kstack());
    }
}

kretprobe:ip_route_input_slow
{   
    if (retval != 0){
        printf("ip_route_input_slow return %d\n", retval);
    }
}

kprobe:ip_route_input_slow
{
    $skb = (struct sk_buff*)arg0;

    if (bswap($skb->protocol) != ETH_P_IP) { return; } // IPv4

    // 网卡
    $dev = (struct net_device *)$skb->dev;
    $ifindex = $dev->ifindex;

    if ($ifindex == 1) { return; } // interface: lo

    // IP Header
    $iph = (struct iphdr *)($skb->head + $skb->network_header);
    $sip = ntop(AF_INET, $iph->saddr);
    $dip = ntop(AF_INET, $iph->daddr);

    if ($iph->protocol != IPPROTO_TCP) { return ; } // TCP

    // TCP HEADER 
    $tcphdr = (struct tcphdr *)($skb->head + $skb->transport_header);
    $sport = bswap($tcphdr->source);
    $dport = bswap($tcphdr->dest);

    if ($sport == 80 || $dport == 80) {
        time("%H:%M:%S ");
        printf("[%d] ip_route_input_slow: %s:%d -> %s:%d\n", $ifindex, $sip, $sport, $dip, $dport);

        $in_dev = (struct net_device*)arg4;
        if ($in_dev == 0){
            printf("indev = NULL\n");
        }

        $daddr =  ntop(AF_INET, (uint32)arg1);
        $saddr = ntop(AF_INET,  (uint32)arg2);


        printf("ip_route_input_slow: %s->%s\n", $saddr, $daddr);
    }
}

END 
{
    printf("Bye!\n");
}